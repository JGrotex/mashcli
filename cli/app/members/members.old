package members

import (
	"encoding/json"
	"errors"
	"github.com/dghubble/sling"
	"github.com/mmussett/mashcli/cli/app/mashcli"
	"github.com/olekukonko/tablewriter"
	"os"
	"strconv"
	"strings"
)

func ShowMember(accessToken string, memberId string) error {

	var m, err = FetchMember(accessToken, memberId)

	if err != nil {
		mashcli.Log.Warning("Member not found")
		return err
	} else {
		m.PrettyPrint()
	}

	return nil
}

func ShowAllMembers(accessToken string) error {

	members, err := FetchAllMembers(accessToken)

	if err != nil {
		mashcli.Log.Warning("Members not found")
		return err
	} else {

		tablePackage := tablewriter.NewWriter(os.Stdout)
		tablePackage.SetHeader([]string{"Member ID", "Username", "Email", "Display Name", "Company", "First Name", "Last Name", "Status", "Created", "Updated"})

		for _, m := range *members {
			data := []string{m.Id, m.Username, m.Email, m.DisplayName, m.Company, m.FirstName, m.LastName, m.AreaStatus, m.Created[:19], m.Updated[:19]}
			tablePackage.Append(data)
		}
		tablePackage.Render()

	}

	return nil

}

func FetchAllMembers(accessToken string) (*[]Members, error) {

	var members *[]Members = new([]Members)

	masheryError := new(mashcli.MasheryError)

	_, err := sling.New().Base(mashcli.BaseURL).Path("/v3/rest/members").Set("Authorization", "Bearer "+accessToken).Set("Content-Type", "application/json").Receive(members, masheryError)

	if err != nil {
		mashcli.Log.Error(err)
		return nil, err
	}

	if masheryError.ErrorCode != 0 {
		return nil, errors.New(err.Error())
	}

	return members, nil

}

func FetchAllMembersUsingFilter(accessToken string, filter string) (*[]Members, error) {

	params := &mashcli.Filter{
		Filter: filter,
	}

	var members *[]Members = new([]Members)
	masheryError := new(mashcli.MasheryError)

	_, err := sling.New().Base(mashcli.BaseURL).Path("/v3/rest/members").Set("Authorization", "Bearer "+accessToken).Set("Content-Type", "application/json").QueryStruct(params).Receive(members, masheryError)

	if err == nil {
		if masheryError.ErrorCode != 0 {
			mashcli.Log.Error("GET " + mashcli.BaseURL + "v3/rest/members -> (" + strconv.Itoa(masheryError.ErrorCode) + " " + masheryError.ErrorMessage + ")")
			return nil, errors.New("Members not found")
		} else {

			return members, nil
		}
	} else {
		mashcli.Log.Error(err)
		return nil, err
	}
}

func fetchMemberUsingFilter(accessToken string, filter string) (*Members, error) {

	params := &mashcli.Filter{
		Filter: filter,
	}

	var members *[]Members = new([]Members)
	masheryError := new(mashcli.MasheryError)

	_, err := sling.New().Base(mashcli.BaseURL).Path("/v3/rest/members").Set("Authorization", "Bearer "+accessToken).Set("Content-Type", "application/json").QueryStruct(params).Receive(members, masheryError)

	if err == nil {
		if masheryError.ErrorCode != 0 {
			mashcli.Log.Error("GET " + mashcli.BaseURL + "v3/rest/members -> (" + strconv.Itoa(masheryError.ErrorCode) + " " + masheryError.ErrorMessage + ")")
			return nil, errors.New("Members not found")
		} else {

			member := new(Members)

			for _, x := range *members {
				member.Address1 = x.Address1
				member.Address2 = x.Address2
				member.AreaStatus = x.AreaStatus
				member.Blog = x.Blog
				member.Company = x.Company
				member.CountryCode = x.CountryCode
				member.Created = x.Created
				member.DisplayName = x.DisplayName
				member.Email = x.Email
				member.ExternalID = x.ExternalID
				member.FirstName = x.FirstName
				member.Id = x.Id
				member.Im = x.Im
				member.Imsvc = x.Imsvc
				member.LastName = x.LastName
				member.Locality = x.Locality
				member.PasswdNew = x.PasswdNew
				member.Phone = x.Phone
				member.PostalCode = x.PostalCode
				member.Region = x.Region
				member.RegistrationIpaddr = x.RegistrationIpaddr
				member.Updated = x.Updated
				member.URI = x.URI
				member.Username = x.Username
			}

			return member, nil
		}
	} else {
		mashcli.Log.Error(err)
		return nil, err
	}
}

func FetchMemberUsingUsername(accessToken string, username string) (*Members, error) {

	return fetchMemberUsingFilter(accessToken, "username:"+username)
}

func FetchMember(accessToken string, memberId string) (*Members, error) {

	member := new(Members)
	masheryError := new(mashcli.MasheryError)

	_, err := sling.New().Base(mashcli.BaseURL).Path("/v3/rest/members/"+memberId).Set("Authorization", "Bearer "+accessToken).Set("Content-Type", "application/json").Receive(member, masheryError)

	if err == nil {
		if masheryError.ErrorCode != 0 {
			mashcli.Log.Error("GET " + mashcli.BaseURL + "v3/rest/members/" + memberId + " -> (" + strconv.Itoa(masheryError.ErrorCode) + " " + masheryError.ErrorMessage + ")")
			return nil, errors.New("Member not found")
		} else {
			return member, nil
		}
	} else {
		mashcli.Log.Error(err)
		return nil, err
	}
}

func (m *Members) PrettyPrint() {

	data := []string{m.Id, m.Username, m.Email, m.DisplayName, m.Company, m.FirstName, m.LastName, m.AreaStatus, m.Imsvc, m.Created[:19], m.Updated[:19]}
	tablePackage := tablewriter.NewWriter(os.Stdout)
	tablePackage.SetHeader([]string{"Member ID", "Username", "Email", "Display Name", "Company", "First Name", "Last Name", "Status", "", "Created", "Updated"})
	tablePackage.SetCaption(true, "User Profile : "+m.DisplayName)
	tablePackage.Append(data)
	tablePackage.Render()
}

func ExportMember(accessToken string, ServiceId string, filename string) {

}

func CreateMember(accessToken string, username string, email string, displayName string, uri string, firstName string, lastName string, password string) (string, error) {

	member := new(Members)

	member.Username = username
	member.Email = email
	member.DisplayName = displayName
	member.URI = uri
	member.Blog = ""
	member.Im = ""
	member.Imsvc = ""
	member.Phone = ""
	member.Company = ""
	member.Address1 = ""
	member.Address2 = ""
	member.Locality = ""
	member.Region = ""
	member.PostalCode = ""
	member.CountryCode = ""
	member.FirstName = firstName
	member.LastName = lastName
	member.AreaStatus = "active"
	member.ExternalID = ""
	member.PasswdNew = password

	memberResponse := new(Members)
	errorResponse := new(mashcli.MasheryError)

	bytes, err := json.Marshal(member)
	if err == nil {
		body := strings.NewReader(string(bytes))

		_, err := sling.New().Base(mashcli.BaseURL).Set("Authorization", "Bearer "+accessToken).Body(body).Set("Accept", "application/json").Set("Content-Type", "application/json").Post("v3/rest/members/").ReceiveSuccess(memberResponse)

		if err == nil {

			if errorResponse.ErrorCode != 0 {
				mashcli.Log.Error("POST " + mashcli.BaseURL + "v3/rest/members -> (" + strconv.Itoa(errorResponse.ErrorCode) + " " + errorResponse.ErrorMessage + ")")
				return "", errors.New("Member not created")
			} else {

				if memberResponse.Id != "" {
					return memberResponse.Id, nil
				} else {
					return "", errors.New("Failed to create member")
				}

			}
		} else {
			if err.Error() == "EOF" {
				return "", errors.New("Failed to create member")
			} else {
				return "", err
			}
		}
	}

	return "", nil

}

func updateMember(accessToken string, member *Members) error {

	memberRequest := new(Members)
	memberResponse := new(Members)
	masheryError := new(mashcli.MasheryError)

	memberRequest.Username = member.Username
	memberRequest.Email = member.Email
	memberRequest.DisplayName = member.DisplayName
	memberRequest.URI = member.URI
	memberRequest.Blog = member.Blog
	memberRequest.Im = member.Im
	memberRequest.Imsvc = member.Imsvc
	memberRequest.Phone = member.Phone
	memberRequest.Company = member.Company
	memberRequest.Address1 = member.Address1
	memberRequest.Address2 = member.Address2
	memberRequest.Locality = member.Locality
	memberRequest.Region = member.Region
	memberRequest.PostalCode = member.PostalCode
	memberRequest.CountryCode = member.CountryCode
	memberRequest.FirstName = member.FirstName
	memberRequest.LastName = member.LastName
	memberRequest.AreaStatus = member.AreaStatus
	memberRequest.ExternalID = member.ExternalID
	memberRequest.PasswdNew = member.PasswdNew

	bytes, err := json.Marshal(memberRequest)
	if err == nil {
		body := strings.NewReader(string(bytes))

		_, err := sling.New().Base(mashcli.BaseURL).Set("Authorization", "Bearer "+accessToken).Body(body).Set("Accept", "application/json").Set("Content-Type", "application/json").Put("v3/rest/members/"+member.Id).Receive(memberResponse, masheryError)

		if err == nil {

			if masheryError.ErrorCode != 0 {
				mashcli.Log.Error("PUT " + mashcli.BaseURL + "v3/rest/members/" + member.Id + " -> (" + strconv.Itoa(masheryError.ErrorCode) + " " + masheryError.ErrorMessage + ")")
				return errors.New("Member not updated")
			} else {
				return nil
			}
		} else {
			if err.Error() == "EOF" {
				return errors.New("Failed to create member")
			} else {
				return err
			}
		}
	}

	return nil

}

func UpdateMember(accessToken string, memberId string, username string, email string, displayName string, uri string, firstName string, lastName string, password string) (string, error) {

	member := new(Members)

	member.Username = username
	member.Email = email
	member.DisplayName = displayName
	member.URI = uri
	member.Blog = ""
	member.Im = ""
	member.Imsvc = ""
	member.Phone = ""
	member.Company = ""
	member.Address1 = ""
	member.Address2 = ""
	member.Locality = ""
	member.Region = ""
	member.PostalCode = ""
	member.CountryCode = ""
	member.FirstName = firstName
	member.LastName = lastName
	member.AreaStatus = "active"
	member.ExternalID = ""
	member.PasswdNew = password

	memberResponse := new(Members)
	masheryError := new(mashcli.MasheryError)

	bytes, err := json.Marshal(member)
	if err == nil {
		body := strings.NewReader(string(bytes))

		_, err := sling.New().Base(mashcli.BaseURL).Set("Authorization", "Bearer "+accessToken).Body(body).Set("Accept", "application/json").Set("Content-Type", "application/json").Put("v3/rest/members/"+memberId).Receive(memberResponse, masheryError)

		if err == nil {

			if masheryError.ErrorCode != 0 {
				mashcli.Log.Error("PUT " + mashcli.BaseURL + "v3/rest/members/" + memberId + " -> (" + strconv.Itoa(masheryError.ErrorCode) + " " + masheryError.ErrorMessage + ")")
				return "", errors.New("Member not created")
			} else {

				if memberResponse.Id != "" {
					return memberResponse.Id, nil
				} else {
					return "", errors.New("Failed to create member")
				}

			}
		} else {
			if err.Error() == "EOF" {
				return "", errors.New("Failed to create member")
			} else {
				return "", err
			}
		}
	}

	return "", nil

}

func MemberSetAreaStatus(accessToken string, memberId string, areaStatus string) error {
	member, err := FetchMember(accessToken, memberId)
	if err == nil {
		member.AreaStatus = areaStatus
		err := updateMember(accessToken, member)
		if err == nil {
			return nil
		} else {
			return errors.New("Failed to update Member Area Status")
		}
	} else {
		return errors.New("Failed to update Member Area Status")
	}
}

func MemberSetPassword(accessToken string, memberId string, password string) error {
	member, err := FetchMember(accessToken, memberId)
	if err == nil {
		member.PasswdNew = password
		err := updateMember(accessToken, member)
		if err == nil {
			return nil
		} else {
			return errors.New("Failed to update Member Area Status")
		}
	} else {
		return errors.New("Failed to update Member Area Status")
	}
}

func DeleteMember(accessToken string, memberId string) error {

	response := new(mashcli.EmptyResponse)
	masheryError := new(mashcli.MasheryError)

	_, err := sling.New().Base(mashcli.BaseURL).Set("Authorization", "Bearer "+accessToken).Delete("v3/rest/members/"+memberId).Receive(response, masheryError)

	if err == nil {
		if masheryError.ErrorCode != 0 {
			mashcli.Log.Error("DELETE " + mashcli.BaseURL + "v3/rest/members/" + memberId + " -> (" + strconv.Itoa(masheryError.ErrorCode) + " " + masheryError.ErrorMessage + ")")
			return errors.New("Member not found")
		} else {
			mashcli.Log.Info("Successfully delete Member")
		}
	} else {
		if err.Error() == "EOF" {
			return nil
		} else {
			return err
		}
	}

	return nil

}

